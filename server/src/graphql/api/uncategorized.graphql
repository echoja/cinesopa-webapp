scalar Upload

# ###########################
#           TYPE
#############################



type Page {
  id: Int
  permalink: String
  title: String
  content: String
  c_date: DateTime
  m_date: DateTime
  role: String
  belongs_to: String
  meta_json: JSON
}

# type File {
#   filename: String
#   mimetype: String
#   encoding: String
# }

# SignInUserPayload bundles information about the user and token


# ###########################
#           ENUMS
#############################



# ###########################
#           INPUT
#############################



# input FileModInput {
#   description: String
#   label: String # 보여지는 이름
#   alt: String
#   public: Boolean
#   managed: Boolean
# }

input DatetimeInput {
  day: Int!
  month: Int!
  year: Int!
  hour: Int!
  minute: Int!
  second: Int!
}

input PageInput {
  title: String
  content: String
  permalink: String
  c_date: DateTime
  m_date: DateTime
  role: String
  belongs_to: String
  meta_json: JSON
}

# ###########################
#         QUARY
#############################

type Query {
  ## PAGE
  page(permalink: String!, belongs_to: String!): Page
  pages(belongs_to: String!, page: Int, perpage: Int): [Page]
  pageById(id: Int!): Page
  
  getFilesManaged: [File]
  getFileByFilename(filename: String!): File
}

# ###########################
#         MUTATION
#############################

type Mutation {


  # pages
  createPage(
    permalink: String!
    belongs_to: String!
    pageinfo: PageInput!
  ): Page
  updatePage(
    permalink: String!
    belongs_to: String!
    pageinfo: PageInput!
  ): Page
  removePage(permalink: String!, belongs_to: String!): Page

  # signin
  # signinUserByEmail(provider: EmailAuthProvider!): SignInUserPayload
  # singleUpload(file: Upload!): File!

  # 1. Create new user
  # createUser(authProvider: EmailAuthProvider!): User
  # createPage(title: String!, content: String!, author: String!, permalink: String!): Page
}
