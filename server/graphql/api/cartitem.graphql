type CartItemProduct {
  product_type: String
  name: String
  featured_image_url: String
  featured_image_alt: String
}

type CartItemOption {
  id: String
  content: String
  price: Int
  count: Int
}

type CartItem {
  user: String # 유저 이메일
  added: DateTime
  modified: DateTime
  product_id: Int
  usage: String
  product: CartItemProduct
  options: [CartItemOption]
  meta: JSON
  id: Int
}

type AddCartitemResult {
  success: Boolean
  code: String
  doc: CartItem
}

type MakeInstancePaymentCartitemResult {
  success: Boolean
  code: String
  doc: CartItem
}
type UpdateOptionCountResult {
  success: Boolean
  code: String
}
type RemoveCartitemResult {
  success: Boolean
  code: String
}

type CartitemByIdResult {
  success: Boolean
  code: String
  list: [CartItem]
}

input CartitemUpdate {
  modified: DateTime
}

input UpdateCountInput {
  count: Int
  modified: DateTime
}

input CartitemInput {
  user: String # 유저 이메일
  added: DateTime
  modified: DateTime
  product_id: Int
  usage: String
  product: CartitemProductInput
  options: [CartitemOptionInput]
  meta: JSON
  # id: Int
}

input CartitemOptionInput {
  id: String
  content: String
  price: Int
  count: Int
}

input CartitemProductInput {
  product_type: String
  name: String
  featured_image_url: String
  featured_image_alt: String
}

# cartitem 은 Admin 차원에서 관리가 필요없겠지..
extend type Query {
  # 현재 유저의 모든 cartitem 을 불러옴..
  cartitems: [CartItem] 

  # 현재 유저의 해당 cartitem 을 불러옴. 
  # 만약 해당 유저의 cartitem 이 아니라면 에러. 
  # 결제 화면에서 cartitem 관련 정보를 가져올 때 사용됨.
  cartitemById(ids: [Int!]!): CartitemByIdResult
}

extend type Mutation {
  addCartitem(input: CartitemInput!): AddCartitemResult
  updateOptionCount(
    id: Int!
    optionId: String!
    count: Int!
    current: DateTime!
  ): UpdateOptionCountResult # Cartitem id, 옵션 id, 카운트
  removeCartitem(id: Int!): RemoveCartitemResult
  makeInstancePaymentCartitem(
    input: CartitemInput!
  ): MakeInstancePaymentCartitemResult # 즉시 구매용 Cartitem 을 만들고, 해당 id를 반환합니다.
}
