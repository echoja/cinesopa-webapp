type User {
  email: String
  has_pwd: Boolean
  default_dest: Destinfo
  c_date: DateTime
  wrong_pwd_count: Int
  blocked_date: DateTime
  blocked_count: Int
  role: String
  kakao_access_token: String
  kakao_refresh_token: String
  kakao_id: String
  verified: Boolean
  user_agreed: UserAgreed
}

type UsersResult {
  total: Int
  list: [User]
}

type CheckAuthResult {
  permissionStatus: PermissionStatus
  emailVerificationRequired: Boolean
  user: User
}
# user가 null 이면 실패, 있으면 성공!
type LoginResult {
  user: User
  redirectLink: String
  success: Boolean
  wrong_reason: LoginWrongReason
  wrong_pwd_count: Int
  emailVerificationRequired: Boolean
}

enum LoginWrongReason {
  no_email
  only_kakao
  wrong_pwd
  too_much_attempt
}

type UserExistsResult {
  email: Boolean
  kakao: Boolean
  pwd: Boolean
}

type RequestChangePasswordResult {
  success: Boolean
}

type RequestVerifyEmailResult {
  success: Boolean
}

type ChangePasswordResult {
  success: Boolean
}

type UserAgreed {
  privacy: Boolean
  policy: Boolean
  advertisement: Boolean
}

type AgreementForKakaoUserResult {
  success: Boolean
  code: String
}

type UpdateMeResult {
  success: Boolean
  code: String
}

enum UserRole {
  ADMIN
  GUEST
}

enum PermissionStatus {
  OK
  LOGIN_REQUIRED
  NO_PERMISSION
}

enum Permission {
  ADMIN
  GUEST
  ANYONE
}

input EmailAuthProvider {
  email: String!
  pwd: String!
  disableSession: Boolean
}

input UpdateUserAdminInput {
  role: UserRole
  default_dest: DestinfoInput
  verified: Boolean
  wrong_pwd_count: Int
  blocked_date: DateTime
  blocked_count: Int
}

input UpdateMeInput {
  default_dest: DestinfoInput
}

input UserAgreedInput {
  privacy: Boolean
  policy: Boolean
  advertisement: Boolean
}

input UsersCondition {
  email: String,
  page: Int,
  perpage: Int,
}


extend type Query {
  users(condition: UsersCondition): UsersResult
  user(email: String!): User
  currentUser: User
  userExists(email: String!): UserExistsResult
  # getUserByEmailNoAuth(email: String!): User # MUST DELETE WHEN DEPLOY!
  checkAuth(
    redirectLink: String!
    role: Permission!
    should_verified: Boolean
  ): CheckAuthResult
}

extend type Mutation {
  # 카카오 로그인은 다른 endpoint 존재. (/graphql/login)
  ## login and logout
  login(provider: EmailAuthProvider!, redirectLink: String): LoginResult
  # logout(email: String!): LoginResult
  logoutMe: User
  # createAdmin(email: String!, pwd: String!, role: UserRole!): User
  createGuest(
    email: String!
    pwd: String!
    user_agreed: UserAgreedInput
    debug: Boolean
  ): User # debug 라면 메일을 보내지 않음. 딱 그것뿐.
  verifyUserEmail(token: String!): User

  updateUserAdmin(email: String!, userinfo: UpdateUserAdminInput): User
  makePwdForKakaoUser(pwd: String!): User # 실패시 user null
  agreementForKakaoUser(
    user_agreed: UserAgreedInput!
  ): AgreementForKakaoUserResult
  updateMe(userinfo: UpdateMeInput!): UpdateMeResult
  requestVerifyEmail(debug: Boolean): RequestVerifyEmailResult
  requestChangePassword(debug: Boolean): RequestChangePasswordResult
  changePassword(token: String!, pwd: String!): ChangePasswordResult
  forceLogin(email: String!): User # 반드시 삭제해야 함. todo
}
